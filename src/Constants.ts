// export default class Constants {
//     static MAJOR_1_1 = 45;
//     static MINOR_1_1 = 3;
//     static MAJOR_1_2 = 46;
//     static MINOR_1_2 = 0;
//     static MAJOR_1_3 = 47;
//     static MINOR_1_3 = 0;
//     static MAJOR_1_4 = 48;
//     static MINOR_1_4 = 0;
//     static MAJOR_1_5 = 49;
//     static MINOR_1_5 = 0;
//     static MAJOR_1_6 = 50;
//     static MINOR_1_6 = 0;
//     static MAJOR_1_7 = 51;
//     static MINOR_1_7 = 0;
//     static MAJOR_1_8 = 52;
//     static MINOR_1_8 = 0;
//     static MAJOR_1_9 = 53;
//     static MINOR_1_9 = 0;
//     static MAJOR_10 = 54;
//     static MINOR_10 = 0;
//     static MAJOR_11 = 55;
//     static MINOR_11 = 0;
//     static MAJOR = 45;
//     static MINOR = 3;
//     static MAX_SHORT = 65535;
//     static MAX_BYTE = 255;
//     static ACC_PUBLIC = 1;
//     static ACC_PRIVATE = 2;
//     static ACC_PROTECTED = 4;
//     static ACC_STATIC = 8;
//     static ACC_FINAL = 16;
//     static ACC_SYNCHRONIZED = 32;
//     static ACC_VOLATILE = 64;
//     static ACC_TRANSIENT = 128;
//     static ACC_NATIVE = 256;
//     static ACC_INTERFACE = 512;
//     static ACC_ABSTRACT = 1024;
//     static ACC_STRICT = 2048;
//     static ACC_SYNTHETIC = 4096;
//     static ACC_ANNOTATION = 8192;
//     static ACC_ENUM = 16384;
//     static ACC_MODULE = 32768;
//     static ACC_BRIDGE = 64;
//     static ACC_VARARGS = 128;
//     static MODULE_ACC_TRANSITIVE = 32;
//     static MODULE_ACC_STATIC_PHASE = 64;
//     static MODULE_ACC_SYNTHETIC = 4096;
//     static MODULE_ACC_MANDATED = 32768;
//     static ACC_SUPER = 32;
//     static MAX_ACC_FLAG = 2048;
//     static ACCESS_NAMES = ['public', 'private', 'protected', 'static', 'final', 'synchronized', 'volatile', 'transient', 'native', 'interface', 'abstract', 'strictfp'];
//     static CONSTANT_Utf8 = 1;
//     static CONSTANT_Integer = 3;
//     static CONSTANT_Float = 4;
//     static CONSTANT_Long = 5;
//     static CONSTANT_Double = 6;
//     static CONSTANT_Class = 7;
//     static CONSTANT_Fieldref = 9;
//     static CONSTANT_String = 8;
//     static CONSTANT_Methodref = 10;
//     static CONSTANT_InterfaceMethodref = 11;
//     static CONSTANT_NameAndType = 12;
//     static CONSTANT_MethodHandle = 15;
//     static CONSTANT_MethodType = 16;
//     static CONSTANT_Dynamic = 17;
//     static CONSTANT_InvokeDynamic = 18;
//     static CONSTANT_Module = 19;
//     static CONSTANT_Package = 20;
//     static CONSTANT_NAMES = ['', 'CONSTANT_Utf8', '', 'CONSTANT_Integer', 'CONSTANT_Float', 'CONSTANT_Long', 'CONSTANT_Double', 'CONSTANT_Class', 'CONSTANT_String', 'CONSTANT_Fieldref', 'CONSTANT_Methodref', 'CONSTANT_InterfaceMethodref', 'CONSTANT_NameAndType', '', '', 'CONSTANT_MethodHandle', 'CONSTANT_MethodType', '', 'CONSTANT_InvokeDynamic', 'CONSTANT_Module', 'CONSTANT_Package'];
//     static STATIC_INITIALIZER_NAME = '<clinit>';
//     static CONSTRUCTOR_NAME = '<init>';
//     static INTERFACES_IMPLEMENTED_BY_ARRAYS = ['java.lang.Cloneable', 'java.io.Serializable'];
//     static MAX_CP_ENTRIES = 65535;
//     static MAX_CODE_SIZE = 65536;
//     static NOP = 0;
//     static ACONST_NULL = 1;
//     static ICONST_M1 = 2;
//     static ICONST_0 = 3;
//     static ICONST_1 = 4;
//     static ICONST_2 = 5;
//     static ICONST_3 = 6;
//     static ICONST_4 = 7;
//     static ICONST_5 = 8;
//     static LCONST_0 = 9;
//     static LCONST_1 = 10;
//     static FCONST_0 = 11;
//     static FCONST_1 = 12;
//     static FCONST_2 = 13;
//     static DCONST_0 = 14;
//     static DCONST_1 = 15;
//     static BIPUSH = 16;
//     static SIPUSH = 17;
//     static LDC = 18;
//     static LDC_W = 19;
//     static LDC2_W = 20;
//     static ILOAD = 21;
//     static LLOAD = 22;
//     static FLOAD = 23;
//     static DLOAD = 24;
//     static ALOAD = 25;
//     static ILOAD_0 = 26;
//     static ILOAD_1 = 27;
//     static ILOAD_2 = 28;
//     static ILOAD_3 = 29;
//     static LLOAD_0 = 30;
//     static LLOAD_1 = 31;
//     static LLOAD_2 = 32;
//     static LLOAD_3 = 33;
//     static FLOAD_0 = 34;
//     static FLOAD_1 = 35;
//     static FLOAD_2 = 36;
//     static FLOAD_3 = 37;
//     static DLOAD_0 = 38;
//     static DLOAD_1 = 39;
//     static DLOAD_2 = 40;
//     static DLOAD_3 = 41;
//     static ALOAD_0 = 42;
//     static ALOAD_1 = 43;
//     static ALOAD_2 = 44;
//     static ALOAD_3 = 45;
//     static IALOAD = 46;
//     static LALOAD = 47;
//     static FALOAD = 48;
//     static DALOAD = 49;
//     static AALOAD = 50;
//     static BALOAD = 51;
//     static CALOAD = 52;
//     static SALOAD = 53;
//     static ISTORE = 54;
//     static LSTORE = 55;
//     static FSTORE = 56;
//     static DSTORE = 57;
//     static ASTORE = 58;
//     static ISTORE_0 = 59;
//     static ISTORE_1 = 60;
//     static ISTORE_2 = 61;
//     static ISTORE_3 = 62;
//     static LSTORE_0 = 63;
//     static LSTORE_1 = 64;
//     static LSTORE_2 = 65;
//     static LSTORE_3 = 66;
//     static FSTORE_0 = 67;
//     static FSTORE_1 = 68;
//     static FSTORE_2 = 69;
//     static FSTORE_3 = 70;
//     static DSTORE_0 = 71;
//     static DSTORE_1 = 72;
//     static DSTORE_2 = 73;
//     static DSTORE_3 = 74;
//     static ASTORE_0 = 75;
//     static ASTORE_1 = 76;
//     static ASTORE_2 = 77;
//     static ASTORE_3 = 78;
//     static IASTORE = 79;
//     static LASTORE = 80;
//     static FASTORE = 81;
//     static DASTORE = 82;
//     static AASTORE = 83;
//     static BASTORE = 84;
//     static CASTORE = 85;
//     static SASTORE = 86;
//     static POP = 87;
//     static POP2 = 88;
//     static DUP = 89;
//     static DUP_X1 = 90;
//     static DUP_X2 = 91;
//     static DUP2 = 92;
//     static DUP2_X1 = 93;
//     static DUP2_X2 = 94;
//     static SWAP = 95;
//     static IADD = 96;
//     static LADD = 97;
//     static FADD = 98;
//     static DADD = 99;
//     static ISUB = 100;
//     static LSUB = 101;
//     static FSUB = 102;
//     static DSUB = 103;
//     static IMUL = 104;
//     static LMUL = 105;
//     static FMUL = 106;
//     static DMUL = 107;
//     static IDIV = 108;
//     static LDIV = 109;
//     static FDIV = 110;
//     static DDIV = 111;
//     static IREM = 112;
//     static LREM = 113;
//     static FREM = 114;
//     static DREM = 115;
//     static INEG = 116;
//     static LNEG = 117;
//     static FNEG = 118;
//     static DNEG = 119;
//     static ISHL = 120;
//     static LSHL = 121;
//     static ISHR = 122;
//     static LSHR = 123;
//     static IUSHR = 124;
//     static LUSHR = 125;
//     static IAND = 126;
//     static LAND = 127;
//     static IOR = 128;
//     static LOR = 129;
//     static IXOR = 130;
//     static LXOR = 131;
//     static IINC = 132;
//     static I2L = 133;
//     static I2F = 134;
//     static I2D = 135;
//     static L2I = 136;
//     static L2F = 137;
//     static L2D = 138;
//     static F2I = 139;
//     static F2L = 140;
//     static F2D = 141;
//     static D2I = 142;
//     static D2L = 143;
//     static D2F = 144;
//     static I2B = 145;
//     static INT2BYTE = 145;
//     static I2C = 146;
//     static INT2CHAR = 146;
//     static I2S = 147;
//     static INT2SHORT = 147;
//     static LCMP = 148;
//     static FCMPL = 149;
//     static FCMPG = 150;
//     static DCMPL = 151;
//     static DCMPG = 152;
//     static IFEQ = 153;
//     static IFNE = 154;
//     static IFLT = 155;
//     static IFGE = 156;
//     static IFGT = 157;
//     static IFLE = 158;
//     static IF_ICMPEQ = 159;
//     static IF_ICMPNE = 160;
//     static IF_ICMPLT = 161;
//     static IF_ICMPGE = 162;
//     static IF_ICMPGT = 163;
//     static IF_ICMPLE = 164;
//     static IF_ACMPEQ = 165;
//     static IF_ACMPNE = 166;
//     static GOTO = 167;
//     static JSR = 168;
//     static RET = 169;
//     static TABLESWITCH = 170;
//     static LOOKUPSWITCH = 171;
//     static IRETURN = 172;
//     static LRETURN = 173;
//     static FRETURN = 174;
//     static DRETURN = 175;
//     static ARETURN = 176;
//     static RETURN = 177;
//     static GETSTATIC = 178;
//     static PUTSTATIC = 179;
//     static GETFIELD = 180;
//     static PUTFIELD = 181;
//     static INVOKEVIRTUAL = 182;
//     static INVOKESPECIAL = 183;
//     static INVOKENONVIRTUAL = 183;
//     static INVOKESTATIC = 184;
//     static INVOKEINTERFACE = 185;
//     static INVOKEDYNAMIC = 186;
//     static NEW = 187;
//     static NEWARRAY = 188;
//     static ANEWARRAY = 189;
//     static ARRAYLENGTH = 190;
//     static ATHROW = 191;
//     static CHECKCAST = 192;
//     static INSTANCEOF = 193;
//     static MONITORENTER = 194;
//     static MONITOREXIT = 195;
//     static WIDE = 196;
//     static MULTIANEWARRAY = 197;
//     static IFNULL = 198;
//     static IFNONNULL = 199;
//     static GOTO_W = 200;
//     static JSR_W = 201;
//     static BREAKPOINT = 202;
//     static LDC_QUICK = 203;
//     static LDC_W_QUICK = 204;
//     static LDC2_W_QUICK = 205;
//     static GETFIELD_QUICK = 206;
//     static PUTFIELD_QUICK = 207;
//     static GETFIELD2_QUICK = 208;
//     static PUTFIELD2_QUICK = 209;
//     static GETSTATIC_QUICK = 210;
//     static PUTSTATIC_QUICK = 211;
//     static GETSTATIC2_QUICK = 212;
//     static PUTSTATIC2_QUICK = 213;
//     static INVOKEVIRTUAL_QUICK = 214;
//     static INVOKENONVIRTUAL_QUICK = 215;
//     static INVOKESUPER_QUICK = 216;
//     static INVOKESTATIC_QUICK = 217;
//     static INVOKEINTERFACE_QUICK = 218;
//     static INVOKEVIRTUALOBJECT_QUICK = 219;
//     static NEW_QUICK = 221;
//     static ANEWARRAY_QUICK = 222;
//     static MULTIANEWARRAY_QUICK = 223;
//     static CHECKCAST_QUICK = 224;
//     static INSTANCEOF_QUICK = 225;
//     static INVOKEVIRTUAL_QUICK_W = 226;
//     static GETFIELD_QUICK_W = 227;
//     static PUTFIELD_QUICK_W = 228;
//     static IMPDEP1 = 254;
//     static IMPDEP2 = 255;
//     static PUSH = 4711;
//     static SWITCH = 4712;
//     static UNDEFINED = -1;
//     static UNPREDICTABLE = -2;
//     static RESERVED = -3;
//     static ILLEGAL_OPCODE = '<illegal opcode>';
//     static ILLEGAL_TYPE = '<illegal type>';
//     static T_BOOLEAN = 4;
//     static T_CHAR = 5;
//     static T_FLOAT = 6;
//     static T_DOUBLE = 7;
//     static T_BYTE = 8;
//     static T_SHORT = 9;
//     static T_INT = 10;
//     static T_LONG = 11;
//     static T_VOID = 12;
//     static T_ARRAY = 13;
//     static T_OBJECT = 14;
//     static T_REFERENCE = 14;
//     static T_UNKNOWN = 15;
//     static T_ADDRESS = 16;
//     static TYPE_NAMES = ['<illegal type>', '<illegal type>', '<illegal type>', '<illegal type>', 'boolean', 'char', 'float', 'double', 'byte', 'short', 'int', 'long', 'void', 'array', 'object', 'unknown'];
//     static CLASS_TYPE_NAMES = ['<illegal type>', '<illegal type>', '<illegal type>', '<illegal type>', 'java.lang.Boolean', 'java.lang.Character', 'java.lang.Float', 'java.lang.Double', 'java.lang.Byte', 'java.lang.Short', 'java.lang.Integer', 'java.lang.Long', 'java.lang.Void', '<illegal type>', '<illegal type>', '<illegal type>'];
//     static SHORT_TYPE_NAMES = ['<illegal type>', '<illegal type>', '<illegal type>', '<illegal type>', 'Z', 'C', 'F', 'D', 'B', 'S', 'I', 'J', 'V', '<illegal type>', '<illegal type>', '<illegal type>'];
//     static PUSH_INST = 1;
//     static CONSTANT_INST = 2;
//     static LOADCLASS_INST = 4;
//     static CP_INST = 8;
//     static INDEXED = 16;
//     static LOAD_INST = 32;
//     static LV_INST = 64;
//     static POP_INST = 128;
//     static STORE_INST = 256;
//     static STACK_INST = 512;
//     static BRANCH_INSTRUCTION = 1024;
//     static TARGETER_INSTRUCTION = 2048;
//     static NEGATABLE = 4096;
//     static IF_INST = 8192;
//     static JSR_INSTRUCTION = 16384;
//     static RET_INST = 32768;
//     static EXCEPTION_THROWER = 65536;
//     // byte[] iLen = new byte[256];
//     static UNDEFINED_LENGTH = 40;
//     static VARIABLE_LENGTH = 38;
//     // byte[] stackEntriesProduced = new byte[256];
//     // Type[] types = new Type[256];
//     // long[] instFlags = new long[256];
//     // Class<Throwable>[][] instExcs = new Class[256][];
//     // static _unused = ConstantsInitializer.initialize();
//     // short[][] TYPE_OF_OPERANDS = new short[][]{new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], {8}, {9}, {8}, {9}, {9}, {8}, {8}, {8}, {8}, {8}, new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], {8}, {8}, {8}, {8}, {8}, new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], {8, 8}, new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9}, {8}, new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], {9}, {9}, {9}, {9}, {9}, {9}, {9}, {9, 8, 8}, new short[0], {9}, {8}, {9}, new short[0], new short[0], {9}, {9}, new short[0], new short[0], {8}, {9, 8}, {9}, {9}, {10}, {10}, new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0], new short[0]];
//     static OPCODE_NAMES = ['nop', 'aconst_null', 'iconst_m1', 'iconst_0', 'iconst_1', 'iconst_2', 'iconst_3', 'iconst_4', 'iconst_5', 'lconst_0', 'lconst_1', 'fconst_0', 'fconst_1', 'fconst_2', 'dconst_0', 'dconst_1', 'bipush', 'sipush', 'ldc', 'ldc_w', 'ldc2_w', 'iload', 'lload', 'fload', 'dload', 'aload', 'iload_0', 'iload_1', 'iload_2', 'iload_3', 'lload_0', 'lload_1', 'lload_2', 'lload_3', 'fload_0', 'fload_1', 'fload_2', 'fload_3', 'dload_0', 'dload_1', 'dload_2', 'dload_3', 'aload_0', 'aload_1', 'aload_2', 'aload_3', 'iaload', 'laload', 'faload', 'daload', 'aaload', 'baload', 'caload', 'saload', 'istore', 'lstore', 'fstore', 'dstore', 'astore', 'istore_0', 'istore_1', 'istore_2', 'istore_3', 'lstore_0', 'lstore_1', 'lstore_2', 'lstore_3', 'fstore_0', 'fstore_1', 'fstore_2', 'fstore_3', 'dstore_0', 'dstore_1', 'dstore_2', 'dstore_3', 'astore_0', 'astore_1', 'astore_2', 'astore_3', 'iastore', 'lastore', 'fastore', 'dastore', 'aastore', 'bastore', 'castore', 'sastore', 'pop', 'pop2', 'dup', 'dup_x1', 'dup_x2', 'dup2', 'dup2_x1', 'dup2_x2', 'swap', 'iadd', 'ladd', 'fadd', 'dadd', 'isub', 'lsub', 'fsub', 'dsub', 'imul', 'lmul', 'fmul', 'dmul', 'idiv', 'ldiv', 'fdiv', 'ddiv', 'irem', 'lrem', 'frem', 'drem', 'ineg', 'lneg', 'fneg', 'dneg', 'ishl', 'lshl', 'ishr', 'lshr', 'iushr', 'lushr', 'iand', 'land', 'ior', 'lor', 'ixor', 'lxor', 'iinc', 'i2l', 'i2f', 'i2d', 'l2i', 'l2f', 'l2d', 'f2i', 'f2l', 'f2d', 'd2i', 'd2l', 'd2f', 'i2b', 'i2c', 'i2s', 'lcmp', 'fcmpl', 'fcmpg', 'dcmpl', 'dcmpg', 'ifeq', 'ifne', 'iflt', 'ifge', 'ifgt', 'ifle', 'if_icmpeq', 'if_icmpne', 'if_icmplt', 'if_icmpge', 'if_icmpgt', 'if_icmple', 'if_acmpeq', 'if_acmpne', 'goto', 'jsr', 'ret', 'tableswitch', 'lookupswitch', 'ireturn', 'lreturn', 'freturn', 'dreturn', 'areturn', 'return', 'getstatic', 'putstatic', 'getfield', 'putfield', 'invokevirtual', 'invokespecial', 'invokestatic', 'invokeinterface', 'invokedynamic', 'new', 'newarray', 'anewarray', 'arraylength', 'athrow', 'checkcast', 'instanceof', 'monitorenter', 'monitorexit', 'wide', 'multianewarray', 'ifnull', 'ifnonnull', 'goto_w', 'jsr_w', 'breakpoint', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', '<illegal opcode>', 'impdep1', 'impdep2'];
//     static CONSUME_STACK = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 3, 4, 3, 4, 3, 3, 3, 3, 1, 2, 1, 2, 3, 2, 3, 4, 2, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 1, 2, 1, 2, 2, 3, 2, 3, 2, 3, 2, 4, 2, 4, 2, 4, 0, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 4, 2, 2, 4, 4, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 0, 0, -2, 1, -2, -2, -2, -2, -2, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, -2, 1, 1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2];
//     static ATTR_UNKNOWN = -1;
//     static ATTR_SOURCE_FILE = 0;
//     static ATTR_CONSTANT_VALUE = 1;
//     static ATTR_CODE = 2;
//     static ATTR_EXCEPTIONS = 3;
//     static ATTR_LINE_NUMBER_TABLE = 4;
//     static ATTR_LOCAL_VARIABLE_TABLE = 5;
//     static ATTR_INNER_CLASSES = 6;
//     static ATTR_SYNTHETIC = 7;
//     static ATTR_DEPRECATED = 8;
//     static ATTR_PMG = 9;
//     static ATTR_SIGNATURE = 10;
//     static ATTR_STACK_MAP = 11;
//     static ATTR_RUNTIME_VISIBLE_ANNOTATIONS = 12;
//     static ATTR_RUNTIME_INVISIBLE_ANNOTATIONS = 13;
//     static ATTR_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS = 14;
//     static ATTR_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS = 15;
//     static ATTR_LOCAL_VARIABLE_TYPE_TABLE = 16;
//     static ATTR_ENCLOSING_METHOD = 17;
//     static ATTR_ANNOTATION_DEFAULT = 18;
//     static ATTR_BOOTSTRAPMETHODS = 19;
//     static ATTR_RUNTIME_VISIBLE_TYPE_ANNOTATIONS = 20;
//     static ATTR_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS = 21;
//     static ATTR_METHOD_PARAMETERS = 22;
//     static ATTR_MODULE = 23;
//     static ATTR_MODULE_PACKAGES = 24;
//     static ATTR_MODULE_MAIN_CLASS = 25;
//     static ATTR_NEST_HOST = 26;
//     static ATTR_NEST_MEMBERS = 27;
//     static KNOWN_ATTRIBUTES = 28;
//     static ATTRIBUTE_NAMES = ['SourceFile', 'ConstantValue', 'Code', 'Exceptions', 'LineNumberTable', 'LocalVariableTable', 'InnerClasses', 'Synthetic', 'Deprecated', 'PMGClass', 'Signature', 'StackMap', 'RuntimeVisibleAnnotations', 'RuntimeInvisibleAnnotations', 'RuntimeVisibleParameterAnnotations', 'RuntimeInvisibleParameterAnnotations', 'LocalVariableTypeTable', 'EnclosingMethod', 'AnnotationDefault', 'BootstrapMethods', 'RuntimeVisibleTypeAnnotations', 'RuntimeInvisibleTypeAnnotations', 'MethodParameters', 'Module', 'ModulePackages', 'ModuleMainClass', 'NestHost', 'NestMembers'];
//     static ITEM_Bogus = 0;
//     static ITEM_Integer = 1;
//     static ITEM_Float = 2;
//     static ITEM_Double = 3;
//     static ITEM_Long = 4;
//     static ITEM_Null = 5;
//     static ITEM_InitObject = 6;
//     static ITEM_Object = 7;
//     static ITEM_NewObject = 8;
//     static ITEM_NAMES = ['Bogus', 'Integer', 'Float', 'Double', 'Long', 'Null', 'InitObject', 'Object', 'NewObject'];
// }
